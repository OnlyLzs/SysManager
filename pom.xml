<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- s项目说明：这里作为聚合工程的父工程 -->
	<groupId>com.lzs.managersys</groupId>
	<artifactId>ManagerSystem</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>lzs</name>
	<description>管理系统</description>

	<!-- s继承说明：这里继承SpringBoot提供的父工程 -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.1.RELEASE</version>
	</parent>

	<!-- 1在父工程的pom文件中，定义jar包的版本。 后续子工程继承父工程时，就可以不需要在写版本号了！！！ 注意：父工程中的jar包，在子工程中未必会全部用到。用哪些时再做引用，这个会在后面的项目中体现； 
		后续子工程需要添加新的jar包时，可以在父工程中增加。这里给出一部分主要的jar包及版本； -->
	<!-- 1集中定义依赖版本号 -->
	<!-- springboot项目不用集中定义版本号 在继承SpringBoot提供的父工程里面 已经定义了版本号 -->
	<!-- 如果想自己定义，在properties中统一控制依赖包的版本，更清晰 -->
	<properties>
		<java.version>1.8</java.version>
		<!--s引用高版本thymeleaf 和 thymeleaf方言 -->
		<!-- <thymeleaf.version>3.0.11.RELEASE</thymeleaf.version> <thymeleaf-layout-dialect.version>2.0.5</thymeleaf-layout-dialect.version> -->
		<commons-lang3.version>3.5</commons-lang3.version>
	</properties>


	<!-- Spring Boot默认使用LogBack日志系统，如果不需要更改为其他日志系统如Log4j2等，则无需多余的配置，LogBack默认将日志打印到控制台上。 -->
	<!-- 2只定义依赖的版本，并不实际依赖 -->
	<dependencies>
		<!-- s只需引入spring-boot-devtools 即可实现热部署 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>
		<!-- springboot 测试 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- springboot mybatis -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.2</version>
		</dependency>
		<!-- springboot thymeleaf -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- mysql -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- s部署到tomcat中需要使用 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- springboot aop 日志处理？？？？？？ -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<!-- s缓存 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>

		<!--s 因为每个实体类都应该包含getter和setter方法才有意义。但是getter和setter方法的代码过于冗余， 属于模板类型代码，影响代码阅读。 
			@Setter和@Getter两个注解是属于[lombok][6]的，在pom.xml文件中添加依赖引入lombok： -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<!-- IO包 -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
		</dependency>
		<!-- lang包 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<!-- s上传excel 依赖 -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>3.11</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>3.9</version>
		</dependency>
		<!-- shiro spring支持 -->
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-spring</artifactId>
			<version>1.4.0</version>
		</dependency>
		<!-- shiro ehcache -->
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-ehcache</artifactId>
			<version>1.2.2</version>
		</dependency>
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache-core</artifactId>
			<version>2.4.8</version>
		</dependency>
		<!--thymeleaf作为前端模板引擎，使用HTML文件，没法引入shiro的tag lib，此时如果要使用shiro的话， 可以引入 
			thymeleaf-extras-shiro.jar这个拓展包来曲线实现shiro的前端验证 -->
		<dependency>
			<groupId>com.github.theborakompanioni</groupId>
			<artifactId>thymeleaf-extras-shiro</artifactId>
			<!-- <version>1.2.1</version> -->
			<version>2.0.0</version>
		</dependency>
		<!-- s引入pagehelper -->
		<!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter -->
		<dependency>
			<groupId>com.github.pagehelper</groupId>
			<artifactId>pagehelper-spring-boot-starter</artifactId>
			<version>1.2.5</version>
		</dependency>
		<!--s引入Druid数据源 -->
		<!-- https://mvnrepository.com/artifact/com.alibaba/druid -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.1.10</version>
		</dependency>
		
		
		<!-- https://mvnrepository.com/artifact/com.squareup.okhttp/okhttp -->
		<dependency>
			<groupId>com.squareup.okhttp</groupId>
			<artifactId>okhttp</artifactId>
			<version>2.7.5</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
		<dependency>
		    <groupId>com.alibaba</groupId>
		    <artifactId>fastjson</artifactId>
		    <version>1.2.47</version>
		</dependency>
		<!-- s个推 -->
		<dependency>
			<groupId>com.gexin.platform</groupId>
			<artifactId>gexin-rp-sdk-http</artifactId>
			<version>4.1.0.1</version>
		</dependency>
	</dependencies>
	
	<!-- s个推仓库 -->
	<repositories>
		<repository>
			<id>getui-nexus</id>
			<url>http://mvn.gt.igexin.com/nexus/content/repositories/releases/</url>
		</repository>
	</repositories>
	
	<!-- <build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build> -->

	<modules>
		<module>System-web</module>
		<module>System-service</module>
		<module>System-mapper</module>
		<module>System-entity</module>
	</modules>
</project>